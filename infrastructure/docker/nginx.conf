worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    gzip on;

    upstream backend {
        server backend:8000;
    }

    upstream frontend {
        server frontend:3000;
    }

    server {
        listen 80;
        server_name podcastmarketing.com;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl;
        server_name podcastmarketing.com;

        ssl_certificate /etc/letsencrypt/live/podcastmarketing.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/podcastmarketing.com/privkey.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /static/ {
            alias /app/static/;
            expires 30d;
            add_header Cache-Control public;
        }

        location /media/ {
            alias /app/media/;
            expires 30d;
            add_header Cache-Control public;
        }
    }
}
```

This Nginx configuration file is set up for the Podcast Marketing Automation SaaS platform. It includes settings for the web server, reverse proxy configuration, and SSL/TLS settings for secure communication. Here's a breakdown of the key components:

1. Basic Nginx settings (user, worker processes, error log, etc.)
2. Event block for connection handling
3. HTTP block with general settings (sendfile, keepalive, MIME types, etc.)
4. SSL/TLS protocol and cipher settings
5. Upstream definitions for backend and frontend services
6. Server block for HTTP to HTTPS redirection
7. Main server block for HTTPS:
   - SSL certificate configuration
   - Location blocks for frontend, backend API, static files, and media files
   - Proxy settings for frontend and backend
   - Caching headers for static and media files

Human tasks (commented):

```
# Human tasks:
# 1. Obtain and configure SSL certificates for the domain (Critical)
# 2. Verify and adjust server_name to match the actual domain name (Required)
# 3. Review and adjust worker_connections based on expected traffic (Optional)