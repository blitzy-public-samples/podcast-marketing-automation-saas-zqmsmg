AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating IAM roles and policies for the Podcast Marketing Automation SaaS platform

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
  Environment:
    Type: String
    Description: Environment (e.g., dev, staging, prod)
    AllowedValues: 
      - dev
      - staging
      - prod

Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-execution-role
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-task-role
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  ECSTaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-${Environment}-ecs-task-role-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-${Environment}-podcast-files/*
              - !Sub arn:aws:s3:::${ProjectName}-${Environment}-podcast-files
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}-*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      Roles:
        - !Ref ECSTaskRole

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-lambda-execution-role
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-${Environment}-lambda-execution-role-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${ProjectName}-${Environment}-podcast-files/*
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}-*
      Roles:
        - !Ref LambdaExecutionRole

Outputs:
  ECSTaskExecutionRoleArn:
    Description: ARN of the ECS Task Execution Role
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskExecutionRoleArn

  ECSTaskRoleArn:
    Description: ARN of the ECS Task Role
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSTaskRoleArn

  LambdaExecutionRoleArn:
    Description: ARN of the Lambda Execution Role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutionRoleArn

# Human Tasks:
# - Review and adjust the IAM policies to ensure they follow the principle of least privilege
# - Verify that the S3 bucket names and SQS queue names in the policies match the actual resource names used in other stacks
# - Consider adding additional roles or policies for other AWS services that may be used in the project (e.g., DynamoDB, SNS)
# - Ensure that the Lambda execution role has all necessary permissions for interacting with other AWS services used in Lambda functions
# - Review the outputs to confirm they provide all necessary information for other CloudFormation stacks
# - Consider implementing a more granular approach to IAM policies, possibly using separate policies for different functions or services
# - Evaluate the need for cross-account roles if the application spans multiple AWS accounts